#summary How to use Spreadsheet component

=UNDER CONSTRUCTION=

==Enable spreadsheet==
Before using spreadsheet, you have to enable this library for your application. To do this, In _Application Properties->Advanced_ enable Library ID *org.zkoss.xpage.core.library* and *org.zkoss.xpage.zss.library*.

==Add spreadsheet component to a page==
To add a Spreadsheet component to a XPage, 
 # Edit the page
 # In *Controls View*, open *ZK* category, you should see the component spreadsheet(http://zkxpage.googlecode.com/svn/trunk/org.zkoss.xpage.zss/images/icon/zss_16.png), drag it to the page.
 # In page *Design* tab, you will see the spreadsheet preview image as following http://zkxpage.googlecode.com/svn/trunk/org.zkoss.xpage.zss/images/zss_preview.jpg
 # In the page *Source* tab, you will see a zk component namespace({{{xmlns:zk="http://www.zkoss.org/xpage"}}}) in the root node, and a spreadsheet node in the xml content like below
{{{
<zk:spreadsheet id="spreadsheet1">
</zk:spreadsheet>
}}}

==Component Properties==
Not all native Spreadsheet properties are directly available in ZK Spreadsheet for XPage Component, following are the available properties.
===Essential properties===
|| *Prpoerty* || *Description* ||
|| id || the component id (ex, {{{spreadsheet1}}}) ||
|| width || the width (ex, {{{600px}}})||
|| height || the height (ex, {{{400px}}})||
|| src || the src location of book model, it could locate in {{{WebContent}}} or class path (ex, {{{/WEB-INF/demo.xls}}})|| 
|| maxcolumns || the maximum visible number of columns of the spreadsheet (ex, {{{40}}})||
|| maxrows || the maximum visible number of rows of this spreadsheet (ex, {{{40}}})||
|| binding || the component binding expression, it is usually a EL expression like {{{ #{zkComponentBinding['a_binding_name']} }}} ||

 * *_zkComponentBinding_* is a util bean which help you to easy to bind component in XPage and access it in Java code.
 * Following is a very general example of using this component
{{{
<zk:spreadsheet id="spreadsheet1" height="400px" width="600px"
	src="/WEB-INF/demo_sample.xls" binding="#{zkComponentBinding['spreadsheet1']}">
</zk:spreadsheet>
}}}


===Other available properties in XPage===
|| *Prpoerty* || *Description* ||
|| apply || the ZK component composer, please read zk developer document for more detail ||
|| style || the CSS style ||
|| sclass || the CSS class ||
|| zclass || the ZK Cascading Style class(es) for this component ||
|| zindex || the Z index ||
|| hflex || horizontal flex hint of this component ||
|| vflex || vertical flex hint of this component ||


==Access Spreadsheet in Controller==
It is very easy to interact with spreadsheet component in XPage Java controller. 
 # Use {{{ComponentBinding.getBridge("a_binding_name")}}} to get a {{{org.zkoss.xpage.zss.component.SpreadsheetBridge}}} back.
 # It is a bridge component, you cannot use the it to access Spreadsheet directly, instead of, you call {{{SpreadsheetBridge.execute(Action action)}}} to get and update the ZK Spreadsheet component in the method {{{Action.doAction(ZulBridgeBase bridge)}}} by invoking {{{bridge.getComponent();}}}
following is a simple example to set/get value of a spreadsheet
{{{
public void doSet(){
	//get the binding bridge back, and execute the action
	ComponentBinding.getBridge("spreadsheet1").execute(new Action(){
		public void doAction(ZulBridgeBase bridge) {
			//get the spreadsheet
			org.zkoss.zss.ui.Spreadsheet ss = (org.zkoss.zss.ui.Spreadsheet)bridge.getComponent();
			//use spreadsheet api to get value
			final Range range = Ranges.range(ss.getSelectedSheet(), cell);
			range.setEditText(value);
			
		}});
}
public void doGet(){
	//get the binding bridge back, and execute the action
	ComponentBinding.getBridge("spreadsheet1").execute(new Action(){
		public void doAction(ZulBridgeBase bridge) {
			//get the spreadsheet
			org.zkoss.zss.ui.Spreadsheet ss = (org.zkoss.zss.ui.Spreadsheet)bridge.getComponent();
			//use spreadsheet api to get value
			Range range = Ranges.range(ss.getSelectedSheet(), cell);
			FormatText ft = range.getFormatText();
			if (ft != null && ft.isCellFormatResult()) {
				value = ft.getCellFormatResult().text;
			} else {
				final RichTextString rstr = range == null ? null : range
						.getRichEditText();
				value = rstr != null ? rstr.getString() : "";
			}
		}});
}
}}}

In the {{{Action.doAction(ZulBridgeBase bridge)}}} method, it is safe to access ZK component's, you can get and update value, and all the update will automatically update to ZK server/client side components.





